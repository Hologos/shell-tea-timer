#! /usr/bin/env bash

readonly _IO_TMP_FILEPATH_ROOT="/tmp/shell-tea-timer"
readonly _IO_TMP_FILE_EXTENSION="dat"

readonly _IO_CONFIG_FILE_EXTENSION="conf"

readonly IO_PARAM_POT="pot"
readonly IO_PARAM_TEA_INFUSION_COUNTER="tea_infusion_counter"
readonly IO_PARAM_TEA_SESSION_START_DATETIME="tea_session_start_datetime"

function io::build_dat_filepath() {
    local tea_name="${1}"
    local param_name="${2}"
    local filepath="${3}"
    local file_extension="${4}"

    printf '%s' "${filepath}.${tea_name}.${param_name}.${file_extension}"
}

function io::read_param() {
    local tea="${1}"
    local param_name="${2}"

    io::read_param_grace "${tea}" "${param_name}" \
        || utils::terminate "Parameter [${param_name}] does not exist for tea [${tea}]."
}

function io::read_param_grace() {
    local tea="${1}"
    local param_name="${2}"
    local filepath

    filepath="$(io::build_dat_filepath "${tea}" "${param_name}" "${_IO_TMP_FILEPATH_ROOT}" "${_IO_TMP_FILE_EXTENSION}")"

    if [[ ! -r "${filepath}" ]]; then
        return 1
    fi

    cat "${filepath}"
}

function io::write_param() {
    local tea="${1}"
    local param_name="${2}"
    local param_value="${3}"
    local filepath

    filepath="$(io::build_dat_filepath "${tea}" "${param_name}" "${_IO_TMP_FILEPATH_ROOT}" "${_IO_TMP_FILE_EXTENSION}")"

    printf '%s' "${param_value}" > "${filepath}" 2> /dev/null
}

function io::discover_files() {
    local dirpath="${1}"
    local file_pattern="${2}"
    local basename_only="${3:-1}"

    if [[ ! -e "${dirpath}" ]]; then
        utils::terminate "Directory [${dirpath}] does not exist."
    fi

    if [[ ! -d "${dirpath}" ]]; then
        utils::terminate "[${dirpath}] is not a directory."
    fi

    if [[ "${basename_only}" -eq 1 ]]; then
        find -L "${dirpath}" -type f -name "${file_pattern}" -exec basename {} \;
    else
        find -L "${dirpath}" -type f -name "${file_pattern}"
    fi
}

function io::discover_tea_conf_files() {
    io::discover_files "${TEAS_CONF_DIRPATH}" "*.${_IO_CONFIG_FILE_EXTENSION}"
}

function io::discover_teas() {
    io::discover_tea_conf_files | rev | cut -c 6- | rev | sort
}

function io::discover_pot_conf_files() {
    io::discover_files "${POTS_CONF_DIRPATH}" "*.${_IO_CONFIG_FILE_EXTENSION}"
}

function io::init() {
    if [[ -z "${STT_CONFIG_DITPATH+_}" ]]; then
        inputparser::usage
        utils::terminate "Environment variable STT_CONFIG_DITPATH is not set and dirpath was not passed via an argument."
    fi

    if [[ ! -e "${STT_CONFIG_DITPATH}" ]]; then
        utils::terminate "Configuration dirpath [${STT_CONFIG_DITPATH}] doesn't exist."
    elif [[ ! -d "${STT_CONFIG_DITPATH}" ]]; then
        utils::terminate "[${STT_CONFIG_DITPATH}] is not a directory."
    fi

    readonly TEAS_CONF_DIRPATH="${STT_CONFIG_DITPATH}/teas"
    readonly POTS_CONF_DIRPATH="${STT_CONFIG_DITPATH}/pots"
    readonly ANNOUNCEMENTS_CONF_DIRPATH="${STT_CONFIG_DITPATH}/announcements"
}

function io::reset_infusion_counter() {
    local tea="${1}"

    io::write_param "${tea}" "${IO_PARAM_TEA_INFUSION_COUNTER}" "0"

    echo
    echo "Reseting $(ansi --bold "${TEA_NAME}") infusion counter."
}

function io::discover_tea_sessions() {
    local dirpath filename_root line
    local delimiter=" "

    dirpath="$(dirname "${_IO_TMP_FILEPATH_ROOT}")"
    filename_root="$(basename "${_IO_TMP_FILEPATH_ROOT}")"

    local dat_file filename_root tea param_name filename_extension
    local pot tea_infusion_counter

    io::discover_files "${dirpath}" "$(io::build_dat_filepath "*" "${IO_PARAM_TEA_INFUSION_COUNTER}" "${filename_root}" "${_IO_TMP_FILE_EXTENSION}")" 0 | sort -n | \
        while IFS=$'\n' read -r dat_file; do
            echo "${dat_file}" |
                while IFS="." read -r filename_root tea param_name filename_extension; do
                    pot="$(io::read_param_grace "${tea}" "${IO_PARAM_POT}")" || continue
                    tea_infusion_counter="$(io::read_param_grace "${tea}" "${IO_PARAM_TEA_INFUSION_COUNTER}")" || continue
                    tea_session_start_datetime="$(io::read_param_grace "${tea}" "${IO_PARAM_TEA_SESSION_START_DATETIME}")" || continue

                    line=""
                    line+="started=${tea_session_start_datetime}"
                    line+="${delimiter}"
                    line+="tea=${tea}"
                    line+="${delimiter}"
                    line+="pot=${pot}"
                    line+="${delimiter}"
                    line+="infusions=${tea_infusion_counter}"

                    echo "${line}"
                done
        done
}

function io::remove_tea_session_data() {
    local tea="${1}"

    dirpath="$(dirname "${_IO_TMP_FILEPATH_ROOT}")"
    filename_root="$(basename "${_IO_TMP_FILEPATH_ROOT}")"

    io::discover_files "${dirpath}" "$(io::build_dat_filepath "${tea}" "*" "${filename_root}" "${_IO_TMP_FILE_EXTENSION}")" "0" \
        | xargs rm -f
}

function io::log_finished_tea_infusion () {
    local tea_session_start_datetime="${1}"
    local tea_infusion_finish_datetime="${2}"
    local tea_name="${3}"
    local pot_name="${4}"
    local infusion_number_ordinal="${5}"
    local recommended_number_of_infusions="${6}"
    local infuse_duration="${7}"
    local leaves_amount="${8}"
    local water_temperature="${9}"

    local delimiter=";"
    local message=""

    if [[ "${STT_TEA_INFUSIONS_HIST_ENABLED}" -ne 1 ]]; then
        ansi --bold --red "Environment variable \$STT_TEA_INFUSIONS_LOG_FILEPATH is not set, logging finished tea infusions is disabled!"
        return
    fi

    if [[ ! -e "${STT_TEA_INFUSIONS_LOG_FILEPATH}" ]]; then
        message+="Tea session start date & time"
        message+="${delimiter}"
        message+="Tea name"
        message+="${delimiter}"
        message+="Pot name"
        message+="${delimiter}"
        message+="Amount of leaves"
        message+="${delimiter}"
        message+="Water temperature"
        message+="${delimiter}"
        message+="Infusion finish date & time"
        message+="${delimiter}"
        message+="Infusion number"
        message+="${delimiter}"
        message+="Infusion duration"

        echo "${message}" > "${STT_TEA_INFUSIONS_LOG_FILEPATH}" \
            || utils::terminate "Cannot log finished tea infusion into [${STT_TEA_INFUSIONS_LOG_FILEPATH}]."
    fi

    message=""
    message+="${tea_session_start_datetime}"
    message+="${delimiter}"
    message+="${tea_name}"
    message+="${delimiter}"
    message+="${pot_name}"
    message+="${delimiter}"
    message+="${leaves_amount}"
    message+="${delimiter}"
    message+="${water_temperature}"
    message+="${delimiter}"
    message+="${tea_infusion_finish_datetime}"
    message+="${delimiter}"
    message+="${infusion_number_ordinal} out of recommended ${recommended_number_of_infusions}"
    message+="${delimiter}"
    message+="${infuse_duration}"

    echo "${message}" >> "${STT_TEA_INFUSIONS_LOG_FILEPATH}" \
        || utils::terminate "Cannot log finished tea session into [${STT_TEA_INFUSIONS_LOG_FILEPATH}]."
}

function io::is_existing_readable_file() {
    local filepath="${filepath}"

    if [[ ! -e "${filepath}" ]]; then
        utils::terminate "File [${filepath}] does not exist!"
    fi

    if [[ ! -f "${filepath}" ]]; then
        utils::terminate "[${filepath}] is not a file!"
    fi

    if [[ ! -r "${filepath}" ]]; then
        utils::terminate "File [${filepath}] is not readable!"
    fi
}
