#! /usr/bin/env bash

STT_TEA_SESSION_HIST_ENABLED=0
STT_NEW_BREWING_PARAMS=0

function flow::ask_main_action() {
    local action_new_session="Start new session"
    local action_load_session="Load existing session"
    local action_exit="Exit program"
    local main_action_list=( "${action_new_session}" "${action_load_session}" "${action_exit}" )
    local main_action_message="What would you like to do?"
    local action

    echo
    ansi --bold --no-newline "${main_action_message} "
    action="$(echo -e "$(IFS=$'\n'; printf '%s' "${main_action_list[*]}")" | fzf --no-mouse)" || utils::terminate "You have to choose an action!"
    ansi --bold --no-newline "${main_action_message} "
    ansi "${action}"

    case "${action}" in
        "${action_new_session}" )
            flow::new_session_action
        ;;

        "${action_load_session}" )
            flow::load_session_action
        ;;

        "${action_exit}" )
            :
        ;;

        * )
            utils::terminate "Unknown action [${action}]."
    esac
}

function flow::ask_tea() {
    local message="Choose a tea you want to brew:"

    echo
    ansi --bold --no-newline "${message} "
    setup::setup_tea
    ansi --bold --no-newline "${message} "
    ansi "${TEA_NAME}"
}

function flow::ask_pot() {
    local message="Choose a pot you want to brew in:"

    echo
    ansi --bold --no-newline "${message} "
    setup::setup_pot
    ansi --bold --no-newline "${message} "
    ansi "${POT_NAME}"
}

function flow::ask_existing_session() {
    local action_message="What existing session would you like to load?"
    local chosen_tea_session
    local discovered_tea_sessions=()
    local tea

    while IFS=$'\n' read -r tea_session; do
        discovered_tea_sessions+=( "${tea_session}" )
    done < <(io::discover_tea_sessions)

    echo
    ansi --bold --no-newline "${action_message} "
    chosen_tea_session="$(echo -e "$(IFS=$'\n'; printf '%s' "${discovered_tea_sessions[*]}")" | fzf --no-mouse)" || utils::terminate "You have to choose existing tea session!"
    ansi --bold --no-newline "${action_message} "
    ansi "${chosen_tea_session}"

    echo
    ansi --bold "Loading existing session."
    tea="$(echo "${chosen_tea_session}" | cut -d ':' -f 1)"
    setup::setup_params_if_valid_tea "${tea}"
}

function flow::ask_want_modify_params() {
    local action_dont_want_modify="No"
    local action_want_modify="Yes"
    local action_list=( "${action_dont_want_modify}" "${action_want_modify}" )
    local action_message="Do you want to modify brewing parameters?"
    local action

    echo
    ansi --bold --no-newline "${action_message} "
    action="$(echo -e "$(IFS=$'\n'; printf '%s' "${action_list[*]}")" | fzf --no-mouse)" || utils::terminate "You have to choose an action!"
    ansi --bold --no-newline "${action_message} "
    ansi "${action}"

    case "${action}" in
        "${action_dont_want_modify}" )
            :
        ;;

        "${action_want_modify}" )
            flow::ask_modify_params
        ;;

        * )
            utils::terminate "Unknown action [${action}]."
    esac
}

function flow::ask_modify_param() {
    local action_message="${1}"
    local current_value="${2}"
    local variable_name="${3}"
    local answer

    echo
    ansi --bold --no-newline "${action_message} "
    read -r answer
    ansi --no-newline --up --delete-line
    ansi --bold --no-newline "${action_message} "
    ansi "${answer}"

    if [[ "${answer}" == "" ]]; then
        answer="${current_value}"
    fi

    eval "${variable_name}=${answer}"
}

function flow::ask_modify_initial_infusion_duration() {
    flow::ask_modify_param \
        "Initial infusion duration (current value: ${TEA_INITIAL_INFUSION_DURATION}) or press [enter] to skip:" \
        "${TEA_INITIAL_INFUSION_DURATION}" \
        "_TMP_TEA_INITIAL_INFUSION_DURATION"
}

function flow::ask_modify_next_infusion_duration() {
    flow::ask_modify_param \
        "Next infusion duration (current value: ${TEA_NEXT_INFUSION_DURATION}) or press [enter] to skip:" \
        "${TEA_NEXT_INFUSION_DURATION}" \
        "_TMP_TEA_NEXT_INFUSION_DURATION"
}

function flow::ask_modify_number_of_infusions() {
    flow::ask_modify_param \
        "Number of total infusions (current value: ${TEA_NUMBER_OF_INFUSIONS}) or press [enter] to skip:" \
        "${TEA_NUMBER_OF_INFUSIONS}" \
        "_TMP_TEA_NUMBER_OF_INFUSIONS"
}

function flow::ask_modify_brewing_temp() {
    flow::ask_modify_param \
        "Brewing temperature (current value: ${TEA_BREWING_TEMP}) or press [enter] to skip:" \
        "${TEA_BREWING_TEMP}" \
        "_TMP_TEA_BREWING_TEMP"
}

function flow::ask_modify_amount_per_100g() {
    flow::ask_modify_param \
        "Amount of leaves per 100g (current value: ${TEA_AMOUNT_PER_100G}) or press [enter] to skip:" \
        "${TEA_AMOUNT_PER_100G}" \
        "_TMP_TEA_AMOUNT_PER_100G"
}

function flow::ask_modify_pot_decant_duration() {
    flow::ask_modify_param \
        "Pot decant duration (current value: ${POT_DECANT_DURATION}) or press [enter] to skip:" \
        "${POT_DECANT_DURATION}" \
        "_TMP_POT_DECANT_DURATION"
}

function flow::ask_modify_pot_capacity_with_leaves() {
    flow::ask_modify_param \
        "Pot capacity with leaves (current value: ${POT_CAPACITY_WITH_LEAVES}) or press [enter] to skip:" \
        "${POT_CAPACITY_WITH_LEAVES}" \
        "_TMP_POT_CAPACITY_WITH_LEAVES"
}

function flow::ask_modify_params() {
    STT_NEW_BREWING_PARAMS=1

    flow::ask_modify_initial_infusion_duration
    flow::ask_modify_next_infusion_duration
    flow::ask_modify_number_of_infusions
    flow::ask_modify_brewing_temp
    flow::ask_modify_amount_per_100g
    flow::ask_modify_pot_decant_duration
    flow::ask_modify_pot_capacity_with_leaves

    setup::modify_params \
        "${_TMP_TEA_INITIAL_INFUSION_DURATION}" \
        "${_TMP_TEA_NEXT_INFUSION_DURATION}" \
        "${_TMP_TEA_NUMBER_OF_INFUSIONS}" \
        "${_TMP_TEA_BREWING_TEMP}" \
        "${_TMP_TEA_AMOUNT_PER_100G}" \
        "${_TMP_POT_DECANT_DURATION}" \
        "${_TMP_POT_CAPACITY_WITH_LEAVES}"

    echo
    echo "Brewing parameters successfully modified."
}

function flow::end_current_session() {
    local action_log_and_remove_session="Log & remove tea session"
    local action_only_remove_session="Only remove tea session"
    local action_backup_session="Backup tea session for later"
    local action_list=( "${action_log_and_remove_session}" "${action_backup_session}" "${action_only_remove_session}" )
    local action_message="What should happen to this tea session?"
    local action

    echo
    ansi --bold --no-newline "${action_message} "
    action="$(echo -e "$(IFS=$'\n'; printf '%s' "${action_list[*]}")" | fzf --no-mouse)" || utils::terminate "You have to choose an action!"
    ansi --bold --no-newline "${action_message} "
    ansi "${action}"

    case "${action}" in
        "${action_log_and_remove_session}" )
            echo
            ansi --bold "Removing this tea session."
            io::remove_tea_session_data "${TEA}"
            flow::log_finished_tea_session
        ;;

        "${action_only_remove_session}" )
            echo
            ansi --bold "Removing this tea session."
            io::remove_tea_session_data "${TEA}"
        ;;

        "${action_backup_session}" )
            echo
            ansi --bold "Backing up this tea session for later."
        ;;

        * )
            utils::terminate "Unknown action [${action}]."
    esac
}

function flow::new_session_action() {
    flow::ask_tea

    flow::ask_pot

    flow::start_session 0
}

function flow::load_session_action() {
    flow::ask_existing_session

    flow::start_session "${TEA_INFUSION_COUNTER}"
}

function flow::start_session() {
    local tea_infusion_counter="${1}"

    local action_end_session="End session"
    local action_next_infusion="Next infusion"
    local action_modify_params="Modify brewing parameters"
    local action_list=( "${action_next_infusion}" "${action_end_session}" "${action_modify_params}" )
    local action_message="How would you like to continue?"
    local action
    local ready_to_start

    STT_NEW_BREWING_PARAMS=1

    flow::ask_want_modify_params

    TEA_INFUSION_COUNTER="${tea_infusion_counter}"

    while true; do
        if [[ "${STT_NEW_BREWING_PARAMS}" -eq 1 ]]; then
            STT_NEW_BREWING_PARAMS=0

            gfx::show_recommended_water_temp

            gfx::show_recommended_leaf_amount

            echo
            ansi --bold --no-newline "Press [enter] when you are ready to start."
            read -r ready_to_start
        fi

        TEA_INFUSION_COUNTER="$(( TEA_INFUSION_COUNTER + 1 ))"
        io::write_param "${TEA}" "${IO_PARAM_TEA_INFUSION_COUNTER}" "${TEA_INFUSION_COUNTER}"

        if [[ "${TEA_INFUSION_COUNTER}" -eq "${TEA_NUMBER_OF_INFUSIONS}" ]]; then
            audio::announce "${ANNOUNCEMENT_LAST_INFUSION}" &
        elif [[ "${TEA_INFUSION_COUNTER}" -gt "${TEA_NUMBER_OF_INFUSIONS}" ]]; then
            audio::announce "${ANNOUNCEMENT_TOO_MANY_INFUSIONS}" &
        fi

        infuse_duration="$(( TEA_INITIAL_INFUSION_DURATION + (TEA_INFUSION_COUNTER - 1) * TEA_NEXT_INFUSION_DURATION ))"

        echo
        echo "You are brewing $(ansi --bold "${TEA_NAME}") in $(ansi --bold "${POT_NAME}") pot."
        echo "This is your $(ansi --bold "$(formatting::format_infusion_number_ordinal "${TEA_INFUSION_COUNTER}")") infusion out of $(ansi --bold "${TEA_NUMBER_OF_INFUSIONS}")."
        echo "Infuse for $(ansi --bold "$(formatting::format_seconds "${infuse_duration}")") in $(ansi --bold "$(helpers::water_temp)") water."
        echo "Decanting should start $(ansi --bold "$(helpers::calculate_start_of_decanting)") earlier."
        gfx::countdown_start "${infuse_duration}"
        echo "Decant your tea now!"
        audio::announce "${ANNOUNCEMENT_DECANT_NOW}" &

        while true; do
            echo
            ansi --bold --no-newline "${action_message} "
            action="$(echo -e "$(IFS=$'\n'; printf '%s' "${action_list[*]}")" | fzf --no-mouse)" || utils::terminate "You have to choose an action!"
            ansi --bold --no-newline "${action_message} "
            ansi "${action}"

            case "${action}" in
                "${action_end_session}" )
                    flow::end_current_session
                    break 2;
                ;;

                "${action_modify_params}" )
                    flow::ask_modify_params
                ;;

                "${action_next_infusion}" )
                    break
                ;;

                * )
                    utils::terminate "Unknown action [${action}]."
            esac
        done

        gfx::clear_screen
    done
}

function flow::check_tea_session_logging() {
    if [[ -z "${STT_TEA_SESSION_LOG_FILEPATH+_}" ]]; then
        echo
        ansi --bold --red "Environment variable \$STT_TEA_SESSION_LOG_FILEPATH is not set, logging finished tea session is disabled!"
        return
    fi

    STT_TEA_SESSION_HIST_ENABLED=1
}

function flow::init() {
    setup::setup_announcement_params
}

function flow::log_finished_tea_session() {
    echo
    ansi --bold "Saving tea session."
    io::log_finished_tea_session
}

function flow::goodbye() {
    echo
    echo "Thank you for using Shell Tea Timer (by hologos)."
}

function flow::main() {
    gfx::clear_screen

    echo
    echo "Welcome to Shell Tea Timer ({{{version}}}, {{{generated_on}}})"

    flow::init

    flow::check_tea_session_logging

    flow::ask_main_action

    flow::goodbye
}
