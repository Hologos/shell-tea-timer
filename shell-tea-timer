#! /usr/bin/env bash

set -uo pipefail

readonly _STT_RESET_OPTION="r"
readonly _STT_HELP_OPTION="h"
readonly _STT_SETUP_ARGUMENT="setup"

readonly STT_CONFIG_FILEPATH_ROOT="/tmp/shell-tea-timer"
readonly UNDEF_VALUE="undef"

readonly SCRIPT_DIRPATH="${HOME}/Scripts/shell-tea-timer"
readonly CONF_DIRPATH="${SCRIPT_DIRPATH}/conf"
readonly TEAS_CONF_DIRPATH="${CONF_DIRPATH}/teas"
readonly POTS_CONF_DIRPATH="${CONF_DIRPATH}/pots"

readonly SLOWNESS_COMPENSATION_FACTOR=1.2

_DEBUG_COMPENSATION_FACTOR_CHECK_START=0
_DEBUG_COMPENSATION_FACTOR_CHECK_FINISH=0
_DEBUG_COMPENSATION_FACTOR_CHECK_DESIRED_DURATION=0

TEA="${UNDEF_VALUE}"
POT="${UNDEF_VALUE}"
TEA_INITIAL_INFUSION_DURATION="${UNDEF_VALUE}"
TEA_NEXT_INFUSION_DURATION="${UNDEF_VALUE}"
TEA_NUMBER_OF_INFUSIONS="${UNDEF_VALUE}"
POT_DECANT_DURATION="${UNDEF_VALUE}"
TEA_BREWING_TEMP="${UNDEF_VALUE}"
TEA_AMOUNT_PER_100G="${UNDEF_VALUE}"
POT_CAPACITY_WITH_LEAVES="${UNDEF_VALUE}"

function stt::debug::report_compensasion_factor() {
    local real_world_duration duration_diff slowness_compensation_factor

    echo
    echo "=================="
    echo "=     DEBUG      ="
    echo "=================="
    echo

    real_world_duration="$(( _DEBUG_COMPENSATION_FACTOR_CHECK_FINISH - _DEBUG_COMPENSATION_FACTOR_CHECK_START ))"
    duration_diff="$(( real_world_duration - _DEBUG_COMPENSATION_FACTOR_CHECK_DESIRED_DURATION ))"
    slowness_compensation_factor="$(echo "scale=2;(${real_world_duration}*${SLOWNESS_COMPENSATION_FACTOR})/${_DEBUG_COMPENSATION_FACTOR_CHECK_DESIRED_DURATION}" | bc)"

    echo "Desired duration is [${_DEBUG_COMPENSATION_FACTOR_CHECK_DESIRED_DURATION} sec]."
    echo "Real world duration is [${real_world_duration} sec]."
    echo
    echo "Duration difference is [${duration_diff} sec]."
    echo "Slowness compensation factor should be [${slowness_compensation_factor}] (set value is [${SLOWNESS_COMPENSATION_FACTOR}])."
}

function stt::utils::terminate() {
    local exit_code="1"
    local message=""

    if [[ ${#} -eq 1 ]]; then
        message="${1}"
    elif [[ ${#} -eq 2 ]]; then
        exit_code="${1}"
        message="${2}"
    fi

    if [[ ${#} -ne 0 ]]; then
        >&2 echo
        >&2 ansi --bold --red "The program has been terminated due to a critical error:"
        >&2 echo
        >&2 echo "${message}"
    fi

    exit "${exit_code}"
}

function stt::utils::check_if_set() {
    local param_name="${1}"
    local input="${2}"

    if [[ "${input}" == "${UNDEF_VALUE}" ]]; then
        stt::utils::terminate "Undefined value for param [${param_name}]."
    fi
}

function stt:utils::repeat_char() {
    local end="${1}"
    local str="${2}"

    local start=1
    local range

    range="$(seq "${start}" "${end}")"

    if [[ "$(echo "if (${end} < ${start}) 0 else 1" | bc)" == "0" ]]; then
        return
    fi

    for i in ${range}; do
        printf '%s' "${str}"
    done
}

function stt:utils::wait_with_bar_counter() {
    local duration="${1}"

    local bar_length=10
    local cycles_per_second=2
    local decant_start_reported=0
    local pre post tick finished sleep_length decant_start

    _DEBUG_COMPENSATION_FACTOR_CHECK_DESIRED_DURATION="${duration}"
    _DEBUG_COMPENSATION_FACTOR_CHECK_START="${SECONDS}"

    duration="$(( duration * cycles_per_second ))"
    sleep_length="$(echo "scale=2;(1/${cycles_per_second})/${SLOWNESS_COMPENSATION_FACTOR}" | bc)"
    tick="$(echo "scale=2;${bar_length}/${duration}" | bc)"
    decant_start="$(stt::calculate_start_of_decanting_raw "${duration}")"

    echo

    while true; do
        post="$(echo "$(echo "scale=2;${duration} * ${tick}" | bc) / 1" | bc)"
        done="$(echo "scale=2;${bar_length} - (${duration} * ${tick})" | bc)"
        pre="$(echo "scale=2;${bar_length} - ${post}" | bc)"
        finished="$(echo "(${done} * 100 / ${bar_length}) / 1" | bc)"
        seconds_left="$(( duration / cycles_per_second ))"
        seconds_suffix="s"

        if [[ "${seconds_left}" =~ ^1$ ]]; then
            seconds_suffix=""
        fi

        if [[ "${seconds_left}" -eq "${decant_start}" ]] && [[ "${decant_start_reported}" -eq 0 ]]; then
            decant_start_reported=1
            say "Začni slévat!" &
        fi

        ansi --no-newline --erase-line=1
        ansi --no-newline --column=1
        echo -n

        printf '%s' '<'
        stt:utils::repeat_char "${pre}" "="
        stt:utils::repeat_char "${post}" " "
        printf '%s' '>  '
        printf '%s%% finished (%s second%s)' "${finished}" "${seconds_left}" "${seconds_suffix}"

        if [[ "$(( duration-- ))" -lt 1 ]]; then
            echo
            break
        else
            sleep "${sleep_length}"
        fi
    done

    _DEBUG_COMPENSATION_FACTOR_CHECK_FINISH="${SECONDS}"

    echo
}

function stt::utils::read_param() {
    local tea="${1}"
    local param_name="${2}"

    stt::utils::read_param_grace "${tea}" "${param_name}" \
        || stt::utils::terminate "Parameter [${param_name}] does not exist for tea [${tea}]."
}

function stt::utils::read_param_grace() {
    local tea="${1}"
    local param_name="${2}"

    local filepath="${STT_CONFIG_FILEPATH_ROOT}.${tea}.${param_name}.cfg"

    if [[ ! -r "${filepath}" ]]; then
        return 1
    fi

    cat "${filepath}"
}

function stt::utils::write_param() {
    local tea="${1}"
    local param_name="${2}"
    local param_value="${3}"

    local filepath="${STT_CONFIG_FILEPATH_ROOT}.${tea}.${param_name}.cfg"

    printf '%s' "${param_value}" > "${filepath}" 2> /dev/null
}

function stt::utils::discover_files() {
    local dirpath="${1}"
    local file_ext="${2}"

    if [[ ! -e "${dirpath}" ]]; then
        stt::utils::terminate "Directory [${dirpath}] does not exist."
    fi

    if [[ ! -d "${dirpath}" ]]; then
        stt::utils::terminate "[${dirpath}] is not a directory."
    fi

    find "${dirpath}" -type f -name "*.${file_ext}" -exec basename {} \;
}

function stt::utils::discover_tea_conf_files() {
    stt::utils::discover_files "${TEAS_CONF_DIRPATH}" "conf"
}

function stt::utils::discover_teas() {
    stt::utils::discover_tea_conf_files | rev | cut -c 6- | rev | sort
}

function stt::utils::discover_pot_conf_files() {
    stt::utils::discover_files "${POTS_CONF_DIRPATH}" "conf"
}


function stt::utils::usage() {
    # shellcheck disable=SC2155
    local fmt_bold="$(ansi --bold --no-restore)"
    # shellcheck disable=SC2155
    local fmt_underline="$(ansi --underline --no-restore)"
    # shellcheck disable=SC2155
    local fmt_reset="$(ansi --reset-attrib)"
    local tea

    >&2 echo
    >&2 echo "Usage: ${0} [-${_STT_HELP_OPTION}] [-${_STT_RESET_OPTION}] [<${_STT_SETUP_ARGUMENT}> | <tea>]"
    >&2 echo
    >&2 echo "    ${fmt_bold}-${_STT_HELP_OPTION}${fmt_reset}"
    >&2 echo "        Prints this help."
    >&2 echo
    >&2 echo "    ${fmt_bold}-${_STT_RESET_OPTION}${fmt_reset}"
    >&2 echo "        Resets infusion counters."
    >&2 echo
    >&2 echo "    ${fmt_bold}<${_STT_SETUP_ARGUMENT}>${fmt_reset}"
    >&2 echo "        Perform setup of tea and pot."
    >&2 echo
    >&2 echo "    ${fmt_bold}<tea>${fmt_reset}"
    >&2 echo "        Tea you want to brew."
    >&2 echo
    >&2 echo "        Possible values:"
    stt::utils::discover_teas | \
        while IFS=$'\n' read -r tea; do
            >&2 echo "            ${tea}"
        done
}

function stt::reset_infusion_counter() {
    local tea="${1}"

    stt::utils::write_param "${tea}" "tea_infusion_counter" "0"

    echo
    echo "Reseting $(ansi --bold "${TEA_NAME}") infusion counter."
}

function stt::water_temp() {
    echo "${TEA_BREWING_TEMP}$(printf '%s' $'\xc2\xb0')C"
}

function stt::infusion_number() {
    printf '%s' "${TEA_INFUSION_COUNTER}"

    case $TEA_INFUSION_COUNTER in
        1) echo "st";;
        2) echo "nd";;
        3) echo "rd";;
        *) echo "th";;
    esac
}

function stt::calculate_amount() {
    echo "$(echo "scale=1;${POT_CAPACITY_WITH_LEAVES}/100*${TEA_AMOUNT_PER_100G}" | bc) g"
}

function stt::calculate_start_of_decanting_raw() {
    local tea_countdown="${1}"
    local ratio=0.6

    echo "scale=0;(${POT_DECANT_DURATION}*${ratio})/1" | bc
}

function stt::calculate_start_of_decanting() {
    local tea_countdown="${1}"
    local start_of_decanting

    start_of_decanting="$(stt::calculate_start_of_decanting_raw "${tea_countdown}")"

    printf '%s second' "${start_of_decanting}"

    if [[ "${start_of_decanting}" -ne 1 ]]; then
        echo "s"
    else
        echo
    fi
}

function stt::setup_tea_params() {
    local tea="${1}"
    local tea_config_filepath

    TEA="${tea}"
    tea_config_filepath="$(stt::utils::discover_tea_conf_files | grep "${tea}")" || return 1

    source "${TEAS_CONF_DIRPATH}/${tea_config_filepath}"

    stt::utils::check_if_set "tea name" "${TEA_NAME}"
    stt::utils::check_if_set "initial infusion duration" "${TEA_INITIAL_INFUSION_DURATION}"
    stt::utils::check_if_set "next infusion duration" "${TEA_NEXT_INFUSION_DURATION}"
    stt::utils::check_if_set "number of infusions" "${TEA_NUMBER_OF_INFUSIONS}"
    stt::utils::check_if_set "brewing temperature" "${TEA_BREWING_TEMP}"
    stt::utils::check_if_set "amount per 100g" "${TEA_AMOUNT_PER_100G}"
}

function stt::setup_pot_params() {
    local tea="${1}"
    local pot_config_filepath

    POT="$(stt::utils::read_param "${tea}" "pot")" || exit ${?}
    pot_config_filepath="$(stt::utils::discover_pot_conf_files | grep "${POT}")" || return 1

    source "${POTS_CONF_DIRPATH}/${pot_config_filepath}"

    stt::utils::check_if_set "pot decant duration" "${POT_DECANT_DURATION}"
    stt::utils::check_if_set "pot capacity with leaves" "${POT_CAPACITY_WITH_LEAVES}"
}

function stt::setup_params_if_valid_tea() {
    local tea="${1}"

    stt::setup_tea_params "${tea}"
    stt::setup_pot_params "${tea}"

    return 0
}

function stt::setup() {
    # TODO: check if FZF is installed
    echo
    ansi --bold --no-newline "Choose a tea you want to brew: "
    TEA="$(stt::utils::discover_tea_conf_files | rev | cut -c 6- | rev | sort | fzf)"
    stt::setup_tea_params "${TEA}"
    ansi --bold --no-newline "Choose a tea you want to brew: "
    ansi "${TEA_NAME}"

    echo
    ansi --bold --no-newline "Choose a pot you want to brew in: "
    POT="$(stt::utils::discover_pot_conf_files | rev | cut -c 6- | rev | sort | fzf)"
    stt::utils::write_param "${TEA}" "pot" "${POT}"
    stt::setup_pot_params "${TEA}"
    ansi --bold --no-newline "Choose a pot you want to brew in: "
    ansi "${POT_NAME}"

    stt::reset_infusion_counter "${TEA}"

    echo
    echo "Heat your water to $(ansi --bold "$(stt::water_temp)")."

    echo
    echo "Use $(ansi --bold "$(stt::calculate_amount)") of leaves (${TEA_AMOUNT_PER_100G} g per 100 ml, pot capacity is ${POT_CAPACITY_WITH_LEAVES} ml)."

    local command="${0} ${TEA}"

    echo
    ansi --bold "Your command has been copied to your clipboard!"
    printf "%s" "${command}" | pbcopy
}

function stt::inputparser::parse_input() {
    local reset=0
    local selected_tea=0

    while [[ ${#} -ne 0 ]] && [[ "${1}" != "" ]]; do
        local input="${1}"

        case "${input}" in

            "-${_STT_RESET_OPTION}" )
                reset=1
            ;;

            "-${_STT_HELP_OPTION}" )
                stt::utils::usage
                stt::utils::terminate
            ;;

            "${_STT_SETUP_ARGUMENT}" )
                stt::setup
                exit 0
            ;;

            * )
                if stt::setup_params_if_valid_tea "${input}"; then
                    selected_tea=1
                else
                    stt::utils::usage
                    stt::utils::terminate "Unknown option [${input}]."
                fi
        esac

        shift
    done

    if [[ ${selected_tea} -ne 1 ]]; then
        stt::utils::usage
        stt::utils::terminate "You have to select a tea."
    fi

    if [[ "${reset}" -eq 1 ]]; then
        stt::reset_infusion_counter "${TEA}"
        echo
        exit 0
    fi
}

stt::inputparser::parse_input "${@}"

stt::utils::check_if_set "tea type" "${TEA}"
TEA_INFUSION_COUNTER="$(stt::utils::read_param_grace "${TEA}" "tea_infusion_counter" || printf '0')"
TEA_INFUSION_COUNTER="$(( TEA_INFUSION_COUNTER + 1 ))"
stt::utils::write_param "${TEA}" "tea_infusion_counter" "${TEA_INFUSION_COUNTER}"

if [[ "${TEA_INFUSION_COUNTER}" -eq "${TEA_NUMBER_OF_INFUSIONS}" ]]; then
    say "Poslední nálev!" &
elif [[ "${TEA_INFUSION_COUNTER}" -gt "${TEA_NUMBER_OF_INFUSIONS}" ]]; then
    say "Už jsi přes čáru." &
fi

tea_countdown="$(( TEA_INITIAL_INFUSION_DURATION + (TEA_INFUSION_COUNTER - 1) * TEA_NEXT_INFUSION_DURATION ))"

echo
echo "You are brewing $(ansi --bold "${TEA_NAME}") in $(ansi --bold "${POT}") pot."
echo "This is your $(ansi --bold "$(stt::infusion_number)") infusion out of $(ansi --bold "${TEA_NUMBER_OF_INFUSIONS}")."
echo "Infuse for $(ansi --bold "${tea_countdown} seconds") in $(ansi --bold "$(stt::water_temp)") water."
echo "Decanting should start $(ansi --bold "$(stt::calculate_start_of_decanting "${tea_countdown}")") earlier."
stt:utils::wait_with_bar_counter "${tea_countdown}"
echo "Decant your tea now!"
say "Do píči čaj."
stt::debug::report_compensasion_factor
