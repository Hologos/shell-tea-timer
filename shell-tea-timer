#! /usr/bin/env bash

set -uo pipefail

readonly _STT_RESET_OPTION="r"
readonly _STT_HELP_OPTION="h"

readonly STT_TEA_TYPE_WHITE="white"
readonly STT_TEA_TYPE_GREEN="green"
readonly STT_TEA_TYPE_RED_SMALL="red-small"
readonly STT_TEA_TYPE_RED_LARGE="red-large"
readonly STT_TEA_TYPE_OOLONG_STRIP="oolong-strip"
readonly STT_TEA_TYPE_OOLONG_ROLLED="oolong-ball"
readonly STT_TEA_TYPE_PUERH_RAW="puerh-raw"
readonly STT_TEA_TYPE_PUERH_RIPE="puerh-ripe"
readonly STT_TEA_DAY_DRINKING_DIVA="day-drinking-diva"
readonly STT_TEA_YOUNG_GUSHU_2022="young-gushu-2022"

readonly STT_CONFIG_FILEPATH_ROOT="/tmp/shell-tea-timer"

TEA_TYPE="undef"
TEA_INITIAL_INFUSION="undef"
TEA_NEXT_INFUSION="undef"

function stt:utils::repeat() {
    local end="${1}"
    local str="${2}"

    local start=1
    local range

    range="$(seq "${start}" "${end}")"

    if [[ "$(echo "if (${end} < ${start}) 0 else 1" | bc)" == "0" ]]; then
        return
    fi

    for i in ${range}; do
        printf '%s' "${str}"
    done
}

function stt:utils::wait_with_bar_counter() {
    local duration="${1}"

    local bar_length=10
    local cycles_per_second=2
    local pre post tick finished sleep_length

    duration="$(( duration * cycles_per_second ))"
    sleep_length="$(echo "scale=2;1/${cycles_per_second}" | bc)"
    tick="$(echo "scale=2;${bar_length}/${duration}" | bc)"


    echo

    while true; do
        post="$(echo "$(echo "scale=2;${duration} * ${tick}" | bc) / 1" | bc)"
        done="$(echo "scale=2;${bar_length} - (${duration} * ${tick})" | bc)"
        pre="$(echo "scale=2;${bar_length} - ${post}" | bc)"
        finished="$(echo "(${done} * 100 / ${bar_length}) / 1" | bc)"
        seconds_left="$(( duration / cycles_per_second ))"
        seconds_suffix="s"

        if [[ "${seconds_left}" =~ ^1$ ]]; then
            seconds_suffix=""
        fi

        ansi --no-newline --erase-line=1
        ansi --no-newline --column=1
        echo -n

        printf '%s' '<'
        stt:utils::repeat "${pre}" "="
        stt:utils::repeat "${post}" " "
        printf '%s' '>  '
        printf '%s%% finished (%s second%s)' "${finished}" "${seconds_left}" "${seconds_suffix}"

        if [[ "$(( duration-- ))" -lt 1 ]]; then
            echo
            break
        else
            sleep "${sleep_length}"
        fi
    done

    echo
}

function stt::reset_infusion_counter() {
    local tea_type="${1}"

    stt::utils::write_param "${tea_type}" "tea_infusion_counter" "0"

    echo
    echo "Reseting $(ansi --bold "${tea_type}") infusion counter."
}

function stt::utils::read_param() {
    local tea_type="${1}"
    local param_name="${2}"

    stt::utils::read_param_grace "${tea_type}" "${param_name}" \
        || stt::utils::terminate "Parameter [${param_name}] does not exist for tea type [${tea_type}]."
}

function stt::utils::read_param_grace() {
    local tea_type="${1}"
    local param_name="${2}"

    local filepath="${STT_CONFIG_FILEPATH_ROOT}.${tea_type}.${param_name}.cfg"

    if [[ ! -r "${filepath}" ]]; then
        return 1
    fi

    cat "${filepath}"
}

function stt::utils::write_param() {
    local tea_type="${1}"
    local param_name="${2}"
    local param_value="${3}"

    local filepath="${STT_CONFIG_FILEPATH_ROOT}.${tea_type}.${param_name}.cfg"

    printf '%s' "${param_value}" > "${filepath}" 2> /dev/null
}

function stt::utils::usage() {
    # shellcheck disable=SC2155
    local fmt_bold="$(ansi --bold --no-restore)"
    # shellcheck disable=SC2155
    local fmt_underline="$(ansi --underline --no-restore)"
    # shellcheck disable=SC2155
    local fmt_reset="$(ansi --reset-attrib)"

    >&2 echo
    >&2 echo "Usage: ${0} [-${_STT_HELP_OPTION}] [-${_STT_RESET_OPTION}] <tea-type>"
    >&2 echo
    >&2 echo "    ${fmt_bold}-${_STT_HELP_OPTION}${fmt_reset}"
    >&2 echo "        Prints this help."
    >&2 echo
    >&2 echo "    ${fmt_bold}-${_STT_RESET_OPTION}${fmt_reset}"
    >&2 echo "        Resets infusion counters."
    >&2 echo
    >&2 echo "    ${fmt_bold}<tea-type>${fmt_reset}"
    >&2 echo "        Type of tea you want to brew."
    >&2 echo
    >&2 echo "        Possible values:"
    >&2 echo "            ${STT_TEA_TYPE_WHITE} - white tea"
    >&2 echo "            ${STT_TEA_TYPE_GREEN} - green tea"
    >&2 echo "            ${STT_TEA_TYPE_RED_SMALL} - red tea (small leaf)"
    >&2 echo "            ${STT_TEA_TYPE_RED_LARGE} - red tea (large leaf)"
    >&2 echo "            ${STT_TEA_TYPE_OOLONG_STRIP} - oolong tea (strips)"
    >&2 echo "            ${STT_TEA_TYPE_OOLONG_ROLLED} - oolong tea (balls)"
    >&2 echo "            ${STT_TEA_TYPE_PUERH_RAW} - raw (sheng, green) puerh tea"
    >&2 echo "            ${STT_TEA_TYPE_PUERH_RIPE} - ripe (shu, red) puerh tea"
    >&2 echo
    >&2 echo "            Actual teas:"
    >&2 echo "                ${STT_TEA_DAY_DRINKING_DIVA} - Day Drinking Diva (raw, sheng)"
    >&2 echo "                ${STT_TEA_YOUNG_GUSHU_2022} - Young Gushu 2022 (raw, sheng)"
}

function stt::utils::terminate() {
    local exit_code="1"
    local message=""

    if [[ ${#} -eq 1 ]]; then
        message="${1}"
    elif [[ ${#} -eq 2 ]]; then
        exit_code="${1}"
        message="${2}"
    fi

    if [[ ${#} -ne 0 ]]; then
        >&2 echo
        >&2 ansi --bold --red "The program has been terminated due to a critical error:"
        >&2 echo
        >&2 echo "${message}"
    fi

    exit "${exit_code}"
}

function stt::set_variables_if_valid_tea_type() {
    local tea_type="${1}"

    case "${tea_type}" in
        # infusion times set according Mei Leaf (https://meileaf.com)
        # available at http://chinalifeweb.com/guides/the-tea-brewing-chart/
        "${STT_TEA_TYPE_WHITE}" )
            TEA_INITIAL_INFUSION=20
            TEA_NEXT_INFUSION=10
        ;;

        "${STT_TEA_TYPE_GREEN}" )
            TEA_INITIAL_INFUSION=15
            TEA_NEXT_INFUSION=3
        ;;

        "${STT_TEA_TYPE_RED_SMALL}" )
            TEA_INITIAL_INFUSION=10
            TEA_NEXT_INFUSION=5
        ;;

        "${STT_TEA_TYPE_RED_LARGE}" )
            TEA_INITIAL_INFUSION=16
            TEA_NEXT_INFUSION=5
        ;;

        "${STT_TEA_TYPE_OOLONG_STRIP}" )
            TEA_INITIAL_INFUSION=20
            TEA_NEXT_INFUSION=5
        ;;

        "${STT_TEA_TYPE_OOLONG_ROLLED}" )
            TEA_INITIAL_INFUSION=25
            TEA_NEXT_INFUSION=5
        ;;

        "${STT_TEA_TYPE_PUERH_RAW}" )
            TEA_INITIAL_INFUSION=10
            TEA_NEXT_INFUSION=3
        ;;

        "${STT_TEA_TYPE_PUERH_RIPE}" )
            TEA_INITIAL_INFUSION=10
            TEA_NEXT_INFUSION=5
        ;;

        "${STT_TEA_DAY_DRINKING_DIVA}" )
            TEA_INITIAL_INFUSION=20
            TEA_NEXT_INFUSION=5
        ;;

        "${STT_TEA_YOUNG_GUSHU_2022}" )
            TEA_INITIAL_INFUSION=25
            TEA_NEXT_INFUSION=5
        ;;

        "test" )
            TEA_INITIAL_INFUSION=2
            TEA_NEXT_INFUSION=1
        ;;

        * )
            return 1
    esac

    return 0
}

function stt::inputparser::parse_input() {
    local reset=0
    local selected_tea=0

    while [[ ${#} -ne 0 ]] && [[ "${1}" != "" ]]; do
        local input="${1}"

        case "${input}" in

            "-${_STT_RESET_OPTION}" )
                reset=1
            ;;

            "-${_STT_HELP_OPTION}" )
                stt::utils::usage
                stt::utils::terminate
            ;;

            * )
                if stt::set_variables_if_valid_tea_type "${input}"; then
                    selected_tea=1
                    TEA_TYPE="${input}"
                else
                    stt::utils::usage
                    stt::utils::terminate "Unknown option [${input}]."
                fi
        esac

        shift
    done

    if [[ ${selected_tea} -ne 1 ]]; then
        stt::utils::usage
        stt::utils::terminate "You have to select a tea type."
    fi

    if [[ "${reset}" -eq 1 ]]; then
        stt::reset_infusion_counter "${TEA_TYPE}"
        echo
        exit 0
    fi
}

stt::inputparser::parse_input "${@}"

tea_infusion_counter="$(stt::utils::read_param_grace "${TEA_TYPE}" "tea_infusion_counter" || printf '0')"
tea_infusion_counter="$(( tea_infusion_counter + 1 ))"
stt::utils::write_param "${TEA_TYPE}" "tea_infusion_counter" "${tea_infusion_counter}"
tea_infusion_counter_suffix=""

case $tea_infusion_counter in
    1) tea_infusion_counter_suffix="st";;
    2) tea_infusion_counter_suffix="nd";;
    3) tea_infusion_counter_suffix="rd";;
    *) tea_infusion_counter_suffix="th";;
esac

tea_countdown="$(( TEA_INITIAL_INFUSION + (tea_infusion_counter - 1) * TEA_NEXT_INFUSION ))"

echo "You are brewing $(ansi --bold "${TEA_TYPE}") tea."
echo "This is your $(ansi --bold "${tea_infusion_counter}${tea_infusion_counter_suffix}") infusion."
echo "Infuse for $(ansi --bold "${tea_countdown}") seconds."
stt:utils::wait_with_bar_counter "${tea_countdown}"
echo "Decant your tea now!"
say "Do píči čaj."
